{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "giz",
  "scopeName": "source.giz",
  "fileTypes": [
    "giz",
    "zon"
  ],
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#support"
    },
    {
      "include": "#variables"
    }
  ],
  "repository": {
    "variables": {
      "patterns": [
        {
          "name": "meta.function.declaration.giz",
          "patterns": [
            {
              "match": "\\b(fn)\\s+([A-Z][a-zA-Z0-9]*)\\b",
              "captures": {
                "1": {
                  "name": "storage.type.function.giz"
                },
                "2": {
                  "name": "entity.name.type.giz"
                }
              }
            },
            {
              "match": "\\b(fn)\\s+([_a-zA-Z][_a-zA-Z0-9]*)\\b",
              "captures": {
                "1": {
                  "name": "storage.type.function.giz"
                },
                "2": {
                  "name": "entity.name.function.giz"
                }
              }
            },
            {
              "begin": "\\b(fn)\\s+@\"",
              "end": "\"",
              "name": "entity.name.function.giz",
              "beginCaptures": {
                "1": {
                  "name": "storage.type.function.giz"
                }
              },
              "patterns": [
                {
                  "include": "#stringcontent"
                }
              ]
            },
            {
              "name": "keyword.default.giz",
              "match": "\\b(const|var|fn)\\b"
            }
          ]
        },
        {
          "name": "meta.function.call.giz",
          "patterns": [
            {
              "match": "([A-Z][a-zA-Z0-9]*)(?=\\s*\\()",
              "name": "entity.name.type.giz"
            },
            {
              "match": "([_a-zA-Z][_a-zA-Z0-9]*)(?=\\s*\\()",
              "name": "entity.name.function.giz"
            }
          ]
        },
        {
          "name": "meta.variable.giz",
          "patterns": [
            {
              "match": "\\b[_A-Z][_A-Z0-9]+\\b",
              "name": "variable.constant.giz"
            },
            {
              "match": "\\b[_a-zA-Z][_a-zA-Z0-9]*_t\\b",
              "name": "entity.name.type.giz"
            },
            {
              "match": "\\b[A-Z][a-zA-Z0-9]*\\b",
              "name": "entity.name.type.giz"
            },
            {
              "match": "\\b[_a-zA-Z][_a-zA-Z0-9]*\\b",
              "name": "variable.giz"
            },
            {
              "begin": "@\"",
              "end": "\"",
              "name": "variable.giz",
              "patterns": [
                {
                  "include": "#stringcontent"
                }
              ]
            }
          ]
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "match": "\\binline\\b(?!\\s*\\bfn\\b)",
          "name": "keyword.control.repeat.giz"
        },
        {
          "match": "\\b(while|for)\\b",
          "name": "keyword.control.repeat.giz"
        },
        {
          "name": "keyword.storage.giz",
          "match": "\\b(extern|packed|export|pub|noalias|inline|comptime|volatile|align|linksection|threadlocal|allowzero|noinline|callconv)\\b"
        },
        {
          "name": "keyword.structure.giz",
          "match": "\\b(struct|enum|union|opaque)\\b"
        },
        {
          "name": "keyword.statement.giz",
          "match": "\\b(asm|unreachable)\\b"
        },
        {
          "name": "keyword.control.flow.giz",
          "match": "\\b(break|return|continue|defer|errdefer)\\b"
        },
        {
          "name": "keyword.control.async.giz",
          "match": "\\b(await|resume|suspend|async|nosuspend)\\b"
        },
        {
          "name": "keyword.control.trycatch.giz",
          "match": "\\b(try|catch)\\b"
        },
        {
          "name": "keyword.control.conditional.giz",
          "match": "\\b(if|else|switch|orelse)\\b"
        },
        {
          "name": "keyword.constant.default.giz",
          "match": "\\b(null|undefined)\\b"
        },
        {
          "name": "keyword.constant.bool.giz",
          "match": "\\b(true|false)\\b"
        },
        {
          "match": "[\\s\\(\\[\\{](\\.[_a-zA-Z][_a-zA-Z0-9]*)(?!\\s*=[^>]|\\s*\\()(?![_a-zA-Z0-9])",
          "captures": {
            "1": {
              "name": "variable.other.enummember.giz"
            }
          }
        },
        {
          "match": "[\\s\\(\\[\\{](\\.@\"[^\"]*\")(?!\\s*=[^>]|\\s*\\()",
          "captures": {
            "1": {
              "name": "variable.other.enummember.giz"
            }
          }
        },
        {
          "name": "keyword.default.giz",
          "match": "\\b(usingnamespace|test|and|or)\\b"
        },
        {
          "name": "meta.error-set.giz",
          "patterns": [
            {
              "begin": "\\b(error)\\b\\s*{",
              "end": "}",
              "beginCaptures": {
                "1": {
                  "name": "keyword.type.giz"
                }
              },
              "patterns": [
                {
                  "match": "\\b[_a-zA-Z][_a-zA-Z0-9]*\\b",
                  "name": "variable.constant.error.giz"
                },
                {
                  "include": "$self"
                }
              ]
            },
            {
              "begin": "\\b(error)\\b",
              "end": "\\b([_a-zA-Z][_a-zA-Z0-9]*)\\b",
              "beginCaptures": {
                "1": {
                  "name": "keyword.type.giz"
                }
              },
              "endCaptures": {
                "1": {
                  "name": "variable.constant.error.giz"
                }
              },
              "patterns": [
                {
                  "include": "$self"
                }
              ]
            }
          ]
        },
        {
          "name": "keyword.type.giz",
          "match": "\\b(bool|void|noreturn|type|error|anyerror|anyframe|anytype|anyopaque)\\b"
        },
        {
          "name": "keyword.type.integer.giz",
          "match": "\\b(f16|f32|f64|f80|f128|u\\d+|i\\d+|isize|usize|comptime_int|comptime_float)\\b"
        },
        {
          "name": "keyword.type.c.giz",
          "match": "\\b(c_short|c_ushort|c_int|c_uint|c_long|c_ulong|c_longlong|c_ulonglong|c_longdouble)\\b"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.c-pointer.giz",
          "match": "\\[*c\\]"
        },
        {
          "name": "keyword.operator.comparison.giz",
          "match": "(\\b(and|or)\\b)|(==|!=)"
        },
        {
          "name": "keyword.operator.arithmetic.giz",
          "match": "(-%?|\\+%?|\\*%?|/|%)=?"
        },
        {
          "name": "keyword.operator.bitwise.giz",
          "match": "(<<%?|>>|!|&|\\^|\\|)=?"
        },
        {
          "name": "keyword.operator.special.giz",
          "match": "(==|\\+\\+|\\*\\*|->)"
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "name": "comment.line.documentation.giz",
          "begin": "//[!/](?=[^/])",
          "end": "$",
          "patterns": [
            {
              "include": "#commentContents"
            }
          ]
        },
        {
          "name": "comment.line.double-slash.giz",
          "begin": "//",
          "end": "$",
          "patterns": [
            {
              "include": "#commentContents"
            }
          ]
        }
      ]
    },
    "commentContents": {
      "patterns": [
        {
          "match": "\\b(TODO|FIXME|XXX|NOTE)\\b:?",
          "name": "keyword.todo.giz"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.giz",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "include": "#stringcontent"
            }
          ]
        },
        {
          "name": "string.multiline.giz",
          "begin": "\\\\\\\\",
          "end": "$"
        },
        {
          "name": "string.quoted.single.giz",
          "match": "'([^'\\\\]|\\\\(x\\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.))'"
        }
      ]
    },
    "stringcontent": {
      "patterns": [
        {
          "name": "constant.character.escape.giz",
          "match": "\\\\([nrt'\"\\\\]|(x[0-9a-fA-F]{2})|(u\\{[0-9a-fA-F]+\\}))"
        },
        {
          "name": "invalid.illegal.unrecognized-string-escape.giz",
          "match": "\\\\."
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.hexfloat.giz",
          "match": "\\b0x[0-9a-fA-F][0-9a-fA-F_]*(\\.[0-9a-fA-F][0-9a-fA-F_]*)?([pP][+-]?[0-9a-fA-F_]+)?\\b"
        },
        {
          "name": "constant.numeric.float.giz",
          "match": "\\b[0-9][0-9_]*(\\.[0-9][0-9_]*)?([eE][+-]?[0-9_]+)?\\b"
        },
        {
          "name": "constant.numeric.decimal.giz",
          "match": "\\b[0-9][0-9_]*\\b"
        },
        {
          "name": "constant.numeric.hexadecimal.giz",
          "match": "\\b0x[a-fA-F0-9_]+\\b"
        },
        {
          "name": "constant.numeric.octal.giz",
          "match": "\\b0o[0-7_]+\\b"
        },
        {
          "name": "constant.numeric.binary.giz",
          "match": "\\b0b[01_]+\\b"
        },
        {
          "name": "constant.numeric.invalid.giz",
          "match": "\\b[0-9](([eEpP][+-])|[0-9a-zA-Z_])*(\\.(([eEpP][+-])|[0-9a-zA-Z_])*)?([eEpP][+-])?[0-9a-zA-Z_]*\\b"
        }
      ]
    },
    "support": {
      "patterns": [
        {
          "comment": "Built-in functions",
          "name": "support.function.builtin.giz",
          "match": "@[_a-zA-Z][_a-zA-Z0-9]*"
        }
      ]
    }
  }
}
